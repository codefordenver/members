# The following types define the data model of the example service
# based on which the GraphQL API is generated

type User @model {
  # Required system field:
  id: ID! @isUnique # read-only (managed by Graphcool)

  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)

  email: String! @isUnique
  name: String
  auth0UserId: String! @isUnique
  picture: String
  githubName: String
  flowdockName: String
  description: String
  role: UserRole @defaultValue(value: REGULAR)
  projectsChampioned: [Project!]! @relation(name: "ProjectChampions")
  # Uncomment below - you can declare relations between models like this

  # posts: [Post!]! @relation(name: "UserPosts")
  skills: [Skill!]! @relation(name: "UserSkills")
}

enum UserRole {
   REGULAR,
   ADMIN
}

# Uncomment the model below as well

# type Post @model {
#   id: ID! @isUnique
#   title: String!
#
#   # Every relation also required a back-relation (to determine 1:1, 1:n or n:m)
#   author: User! @relation(name: "UserPosts")
# }

type Project @model {
  # Required system field:
  id: ID! @isUnique # read-only (managed by Graphcool)

  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)

  name: String! @isUnique
  description: String
  cfapiProjectId: String @isUnique @depricated # Soon to be removed
  repoName: String @isUnique # for linking to github repos and waffle boards
  champions: [User!]! @relation(name: "ProjectChampions")
}

type Skill @model {
  # Required system field:
  id: ID! @isUnique # read-only (managed by Graphcool)

  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)

  name: String! @isUnique

  usersWithSkill: [User!]! @relation(name: "UserSkills")
}
