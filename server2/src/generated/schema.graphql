### This file was autogenerated by Nexus 0.11.5
### Do not make changes to this file directly


type AggregateProject {
  count: Int!
}

type AggregateSkill {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AuthPayload {
  token: String
  user: User
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createProject(data: ProjectCreateInput!): Project!
  createSkill(data: SkillCreateInput!): Skill!
  createUser(data: UserCreateInput!): User!
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  deleteManySkills(where: SkillWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteSkill(where: SkillWhereUniqueInput!): Skill
  deleteUser(where: UserWhereUniqueInput!): User
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  updateManySkills(data: SkillUpdateManyMutationInput!, where: SkillWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateSkill(data: SkillUpdateInput!, where: SkillWhereUniqueInput!): Skill
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertProject(create: ProjectCreateInput!, update: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project!
  upsertSkill(create: SkillCreateInput!, update: SkillUpdateInput!, where: SkillWhereUniqueInput!): Skill!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Project {
  cfapiProjectId: String
  champions(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  createdAt: DateTime!
  description: String
  headerImage: String
  id: ID!
  name: String!
  repoName: String
  skills(after: String, before: String, first: Int, last: Int, orderBy: SkillOrderByInput, skip: Int, where: SkillWhereInput): [Skill!]
  status: ProjectStatus
  updatedAt: DateTime!
}

type ProjectConnection {
  aggregate: AggregateProject!
  edges: [ProjectEdge!]!
  pageInfo: PageInfo!
}

input ProjectCreateInput {
  cfapiProjectId: String
  champions: UserCreateManyWithoutProjectsChampionedInput
  description: String
  headerImage: String
  name: String!
  repoName: String
  skills: SkillCreateManyWithoutProjectsWithSkillInput
  status: ProjectStatus
}

input ProjectCreateManyWithoutChampionsInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutChampionsInput!]
}

input ProjectCreateManyWithoutSkillsInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutSkillsInput!]
}

input ProjectCreateWithoutChampionsInput {
  cfapiProjectId: String
  description: String
  headerImage: String
  name: String!
  repoName: String
  skills: SkillCreateManyWithoutProjectsWithSkillInput
  status: ProjectStatus
}

input ProjectCreateWithoutSkillsInput {
  cfapiProjectId: String
  champions: UserCreateManyWithoutProjectsChampionedInput
  description: String
  headerImage: String
  name: String!
  repoName: String
  status: ProjectStatus
}

type ProjectEdge {
  cursor: String!
  node: Project!
}

enum ProjectOrderByInput {
  cfapiProjectId_ASC
  cfapiProjectId_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  headerImage_ASC
  headerImage_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  repoName_ASC
  repoName_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ProjectScalarWhereInput {
  AND: [ProjectScalarWhereInput!]
  cfapiProjectId: String
  cfapiProjectId_contains: String
  cfapiProjectId_ends_with: String
  cfapiProjectId_gt: String
  cfapiProjectId_gte: String
  cfapiProjectId_in: [String!]
  cfapiProjectId_lt: String
  cfapiProjectId_lte: String
  cfapiProjectId_not: String
  cfapiProjectId_not_contains: String
  cfapiProjectId_not_ends_with: String
  cfapiProjectId_not_in: [String!]
  cfapiProjectId_not_starts_with: String
  cfapiProjectId_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  headerImage: String
  headerImage_contains: String
  headerImage_ends_with: String
  headerImage_gt: String
  headerImage_gte: String
  headerImage_in: [String!]
  headerImage_lt: String
  headerImage_lte: String
  headerImage_not: String
  headerImage_not_contains: String
  headerImage_not_ends_with: String
  headerImage_not_in: [String!]
  headerImage_not_starts_with: String
  headerImage_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  repoName: String
  repoName_contains: String
  repoName_ends_with: String
  repoName_gt: String
  repoName_gte: String
  repoName_in: [String!]
  repoName_lt: String
  repoName_lte: String
  repoName_not: String
  repoName_not_contains: String
  repoName_not_ends_with: String
  repoName_not_in: [String!]
  repoName_not_starts_with: String
  repoName_starts_with: String
  status: ProjectStatus
  status_in: [ProjectStatus!]
  status_not: ProjectStatus
  status_not_in: [ProjectStatus!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

enum ProjectStatus {
  ActiveDevelopment
  Exploration
  Idea
  Inactive
  Pitch
  Support
}

input ProjectUpdateInput {
  cfapiProjectId: String
  champions: UserUpdateManyWithoutProjectsChampionedInput
  description: String
  headerImage: String
  name: String
  repoName: String
  skills: SkillUpdateManyWithoutProjectsWithSkillInput
  status: ProjectStatus
}

input ProjectUpdateManyDataInput {
  cfapiProjectId: String
  description: String
  headerImage: String
  name: String
  repoName: String
  status: ProjectStatus
}

input ProjectUpdateManyMutationInput {
  cfapiProjectId: String
  description: String
  headerImage: String
  name: String
  repoName: String
  status: ProjectStatus
}

input ProjectUpdateManyWithoutChampionsInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutChampionsInput!]
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutChampionsInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutChampionsInput!]
}

input ProjectUpdateManyWithoutSkillsInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutSkillsInput!]
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutSkillsInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutSkillsInput!]
}

input ProjectUpdateManyWithWhereNestedInput {
  data: ProjectUpdateManyDataInput!
  where: ProjectScalarWhereInput!
}

input ProjectUpdateWithoutChampionsDataInput {
  cfapiProjectId: String
  description: String
  headerImage: String
  name: String
  repoName: String
  skills: SkillUpdateManyWithoutProjectsWithSkillInput
  status: ProjectStatus
}

input ProjectUpdateWithoutSkillsDataInput {
  cfapiProjectId: String
  champions: UserUpdateManyWithoutProjectsChampionedInput
  description: String
  headerImage: String
  name: String
  repoName: String
  status: ProjectStatus
}

input ProjectUpdateWithWhereUniqueWithoutChampionsInput {
  data: ProjectUpdateWithoutChampionsDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithWhereUniqueWithoutSkillsInput {
  data: ProjectUpdateWithoutSkillsDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithWhereUniqueWithoutChampionsInput {
  create: ProjectCreateWithoutChampionsInput!
  update: ProjectUpdateWithoutChampionsDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithWhereUniqueWithoutSkillsInput {
  create: ProjectCreateWithoutSkillsInput!
  update: ProjectUpdateWithoutSkillsDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  cfapiProjectId: String
  cfapiProjectId_contains: String
  cfapiProjectId_ends_with: String
  cfapiProjectId_gt: String
  cfapiProjectId_gte: String
  cfapiProjectId_in: [String!]
  cfapiProjectId_lt: String
  cfapiProjectId_lte: String
  cfapiProjectId_not: String
  cfapiProjectId_not_contains: String
  cfapiProjectId_not_ends_with: String
  cfapiProjectId_not_in: [String!]
  cfapiProjectId_not_starts_with: String
  cfapiProjectId_starts_with: String
  champions_every: UserWhereInput
  champions_none: UserWhereInput
  champions_some: UserWhereInput
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  headerImage: String
  headerImage_contains: String
  headerImage_ends_with: String
  headerImage_gt: String
  headerImage_gte: String
  headerImage_in: [String!]
  headerImage_lt: String
  headerImage_lte: String
  headerImage_not: String
  headerImage_not_contains: String
  headerImage_not_ends_with: String
  headerImage_not_in: [String!]
  headerImage_not_starts_with: String
  headerImage_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  repoName: String
  repoName_contains: String
  repoName_ends_with: String
  repoName_gt: String
  repoName_gte: String
  repoName_in: [String!]
  repoName_lt: String
  repoName_lte: String
  repoName_not: String
  repoName_not_contains: String
  repoName_not_ends_with: String
  repoName_not_in: [String!]
  repoName_not_starts_with: String
  repoName_starts_with: String
  skills_every: SkillWhereInput
  skills_none: SkillWhereInput
  skills_some: SkillWhereInput
  status: ProjectStatus
  status_in: [ProjectStatus!]
  status_not: ProjectStatus
  status_not_in: [ProjectStatus!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input ProjectWhereUniqueInput {
  cfapiProjectId: String
  id: ID
  name: String
  repoName: String
}

type Query {
  project(where: ProjectWhereUniqueInput!): Project
  projects(after: String, before: String, first: Int, last: Int, orderBy: ProjectOrderByInput, skip: Int, where: ProjectWhereInput): [Project!]!
  projectsConnection(after: String, before: String, first: Int, last: Int, orderBy: ProjectOrderByInput, skip: Int, where: ProjectWhereInput): ProjectConnection!
  skill(where: SkillWhereUniqueInput!): Skill
  skills(after: String, before: String, first: Int, last: Int, orderBy: SkillOrderByInput, skip: Int, where: SkillWhereInput): [Skill!]!
  skillsConnection(after: String, before: String, first: Int, last: Int, orderBy: SkillOrderByInput, skip: Int, where: SkillWhereInput): SkillConnection!
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersConnection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): UserConnection!
}

type Skill {
  createdAt: DateTime!
  id: ID!
  name: String!
  projectsWithSkill(after: String, before: String, first: Int, last: Int, orderBy: ProjectOrderByInput, skip: Int, where: ProjectWhereInput): [Project!]
  updatedAt: DateTime!
  usersWithSkill(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
}

type SkillConnection {
  aggregate: AggregateSkill!
  edges: [SkillEdge!]!
  pageInfo: PageInfo!
}

input SkillCreateInput {
  name: String!
  projectsWithSkill: ProjectCreateManyWithoutSkillsInput
  usersWithSkill: UserCreateManyWithoutSkillsInput
}

input SkillCreateManyWithoutProjectsWithSkillInput {
  connect: [SkillWhereUniqueInput!]
  create: [SkillCreateWithoutProjectsWithSkillInput!]
}

input SkillCreateManyWithoutUsersWithSkillInput {
  connect: [SkillWhereUniqueInput!]
  create: [SkillCreateWithoutUsersWithSkillInput!]
}

input SkillCreateWithoutProjectsWithSkillInput {
  name: String!
  usersWithSkill: UserCreateManyWithoutSkillsInput
}

input SkillCreateWithoutUsersWithSkillInput {
  name: String!
  projectsWithSkill: ProjectCreateManyWithoutSkillsInput
}

type SkillEdge {
  cursor: String!
  node: Skill!
}

enum SkillOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input SkillScalarWhereInput {
  AND: [SkillScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [SkillScalarWhereInput!]
  OR: [SkillScalarWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input SkillUpdateInput {
  name: String
  projectsWithSkill: ProjectUpdateManyWithoutSkillsInput
  usersWithSkill: UserUpdateManyWithoutSkillsInput
}

input SkillUpdateManyDataInput {
  name: String
}

input SkillUpdateManyMutationInput {
  name: String
}

input SkillUpdateManyWithoutProjectsWithSkillInput {
  connect: [SkillWhereUniqueInput!]
  create: [SkillCreateWithoutProjectsWithSkillInput!]
  delete: [SkillWhereUniqueInput!]
  deleteMany: [SkillScalarWhereInput!]
  disconnect: [SkillWhereUniqueInput!]
  set: [SkillWhereUniqueInput!]
  update: [SkillUpdateWithWhereUniqueWithoutProjectsWithSkillInput!]
  updateMany: [SkillUpdateManyWithWhereNestedInput!]
  upsert: [SkillUpsertWithWhereUniqueWithoutProjectsWithSkillInput!]
}

input SkillUpdateManyWithoutUsersWithSkillInput {
  connect: [SkillWhereUniqueInput!]
  create: [SkillCreateWithoutUsersWithSkillInput!]
  delete: [SkillWhereUniqueInput!]
  deleteMany: [SkillScalarWhereInput!]
  disconnect: [SkillWhereUniqueInput!]
  set: [SkillWhereUniqueInput!]
  update: [SkillUpdateWithWhereUniqueWithoutUsersWithSkillInput!]
  updateMany: [SkillUpdateManyWithWhereNestedInput!]
  upsert: [SkillUpsertWithWhereUniqueWithoutUsersWithSkillInput!]
}

input SkillUpdateManyWithWhereNestedInput {
  data: SkillUpdateManyDataInput!
  where: SkillScalarWhereInput!
}

input SkillUpdateWithoutProjectsWithSkillDataInput {
  name: String
  usersWithSkill: UserUpdateManyWithoutSkillsInput
}

input SkillUpdateWithoutUsersWithSkillDataInput {
  name: String
  projectsWithSkill: ProjectUpdateManyWithoutSkillsInput
}

input SkillUpdateWithWhereUniqueWithoutProjectsWithSkillInput {
  data: SkillUpdateWithoutProjectsWithSkillDataInput!
  where: SkillWhereUniqueInput!
}

input SkillUpdateWithWhereUniqueWithoutUsersWithSkillInput {
  data: SkillUpdateWithoutUsersWithSkillDataInput!
  where: SkillWhereUniqueInput!
}

input SkillUpsertWithWhereUniqueWithoutProjectsWithSkillInput {
  create: SkillCreateWithoutProjectsWithSkillInput!
  update: SkillUpdateWithoutProjectsWithSkillDataInput!
  where: SkillWhereUniqueInput!
}

input SkillUpsertWithWhereUniqueWithoutUsersWithSkillInput {
  create: SkillCreateWithoutUsersWithSkillInput!
  update: SkillUpdateWithoutUsersWithSkillDataInput!
  where: SkillWhereUniqueInput!
}

input SkillWhereInput {
  AND: [SkillWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  projectsWithSkill_every: ProjectWhereInput
  projectsWithSkill_none: ProjectWhereInput
  projectsWithSkill_some: ProjectWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  usersWithSkill_every: UserWhereInput
  usersWithSkill_none: UserWhereInput
  usersWithSkill_some: UserWhereInput
}

input SkillWhereUniqueInput {
  id: ID
  name: String
}

type User {
  createdAt: DateTime!
  description: String
  email: String!
  flowdockName: String
  githubName: String
  hasCompletedWizard: Boolean
  id: ID!
  name: String
  picture: String
  projectsChampioned(after: String, before: String, first: Int, last: Int, orderBy: ProjectOrderByInput, skip: Int, where: ProjectWhereInput): [Project!]
  role: UserRole
  skills(after: String, before: String, first: Int, last: Int, orderBy: SkillOrderByInput, skip: Int, where: SkillWhereInput): [Skill!]
  updatedAt: DateTime!
}

type UserConnection {
  aggregate: AggregateUser!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

input UserCreateInput {
  auth0UserId: String!
  description: String
  email: String!
  flowdockName: String
  githubName: String
  hasCompletedWizard: Boolean
  name: String
  picture: String
  projectsChampioned: ProjectCreateManyWithoutChampionsInput
  role: UserRole
  skills: SkillCreateManyWithoutUsersWithSkillInput
}

input UserCreateManyWithoutProjectsChampionedInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutProjectsChampionedInput!]
}

input UserCreateManyWithoutSkillsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutSkillsInput!]
}

input UserCreateWithoutProjectsChampionedInput {
  auth0UserId: String!
  description: String
  email: String!
  flowdockName: String
  githubName: String
  hasCompletedWizard: Boolean
  name: String
  picture: String
  role: UserRole
  skills: SkillCreateManyWithoutUsersWithSkillInput
}

input UserCreateWithoutSkillsInput {
  auth0UserId: String!
  description: String
  email: String!
  flowdockName: String
  githubName: String
  hasCompletedWizard: Boolean
  name: String
  picture: String
  projectsChampioned: ProjectCreateManyWithoutChampionsInput
  role: UserRole
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByInput {
  auth0UserId_ASC
  auth0UserId_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  email_ASC
  email_DESC
  flowdockName_ASC
  flowdockName_DESC
  githubName_ASC
  githubName_DESC
  hasCompletedWizard_ASC
  hasCompletedWizard_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  picture_ASC
  picture_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum UserRole {
  ADMIN
  REGULAR
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  auth0UserId: String
  auth0UserId_contains: String
  auth0UserId_ends_with: String
  auth0UserId_gt: String
  auth0UserId_gte: String
  auth0UserId_in: [String!]
  auth0UserId_lt: String
  auth0UserId_lte: String
  auth0UserId_not: String
  auth0UserId_not_contains: String
  auth0UserId_not_ends_with: String
  auth0UserId_not_in: [String!]
  auth0UserId_not_starts_with: String
  auth0UserId_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  flowdockName: String
  flowdockName_contains: String
  flowdockName_ends_with: String
  flowdockName_gt: String
  flowdockName_gte: String
  flowdockName_in: [String!]
  flowdockName_lt: String
  flowdockName_lte: String
  flowdockName_not: String
  flowdockName_not_contains: String
  flowdockName_not_ends_with: String
  flowdockName_not_in: [String!]
  flowdockName_not_starts_with: String
  flowdockName_starts_with: String
  githubName: String
  githubName_contains: String
  githubName_ends_with: String
  githubName_gt: String
  githubName_gte: String
  githubName_in: [String!]
  githubName_lt: String
  githubName_lte: String
  githubName_not: String
  githubName_not_contains: String
  githubName_not_ends_with: String
  githubName_not_in: [String!]
  githubName_not_starts_with: String
  githubName_starts_with: String
  hasCompletedWizard: Boolean
  hasCompletedWizard_not: Boolean
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  picture: String
  picture_contains: String
  picture_ends_with: String
  picture_gt: String
  picture_gte: String
  picture_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_not: String
  picture_not_contains: String
  picture_not_ends_with: String
  picture_not_in: [String!]
  picture_not_starts_with: String
  picture_starts_with: String
  role: UserRole
  role_in: [UserRole!]
  role_not: UserRole
  role_not_in: [UserRole!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input UserUpdateInput {
  auth0UserId: String
  description: String
  email: String
  flowdockName: String
  githubName: String
  hasCompletedWizard: Boolean
  name: String
  picture: String
  projectsChampioned: ProjectUpdateManyWithoutChampionsInput
  role: UserRole
  skills: SkillUpdateManyWithoutUsersWithSkillInput
}

input UserUpdateManyDataInput {
  auth0UserId: String
  description: String
  email: String
  flowdockName: String
  githubName: String
  hasCompletedWizard: Boolean
  name: String
  picture: String
  role: UserRole
}

input UserUpdateManyMutationInput {
  auth0UserId: String
  description: String
  email: String
  flowdockName: String
  githubName: String
  hasCompletedWizard: Boolean
  name: String
  picture: String
  role: UserRole
}

input UserUpdateManyWithoutProjectsChampionedInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutProjectsChampionedInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutProjectsChampionedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutProjectsChampionedInput!]
}

input UserUpdateManyWithoutSkillsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutSkillsInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSkillsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSkillsInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateWithoutProjectsChampionedDataInput {
  auth0UserId: String
  description: String
  email: String
  flowdockName: String
  githubName: String
  hasCompletedWizard: Boolean
  name: String
  picture: String
  role: UserRole
  skills: SkillUpdateManyWithoutUsersWithSkillInput
}

input UserUpdateWithoutSkillsDataInput {
  auth0UserId: String
  description: String
  email: String
  flowdockName: String
  githubName: String
  hasCompletedWizard: Boolean
  name: String
  picture: String
  projectsChampioned: ProjectUpdateManyWithoutChampionsInput
  role: UserRole
}

input UserUpdateWithWhereUniqueWithoutProjectsChampionedInput {
  data: UserUpdateWithoutProjectsChampionedDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutSkillsInput {
  data: UserUpdateWithoutSkillsDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutProjectsChampionedInput {
  create: UserCreateWithoutProjectsChampionedInput!
  update: UserUpdateWithoutProjectsChampionedDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutSkillsInput {
  create: UserCreateWithoutSkillsInput!
  update: UserUpdateWithoutSkillsDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  auth0UserId: String
  auth0UserId_contains: String
  auth0UserId_ends_with: String
  auth0UserId_gt: String
  auth0UserId_gte: String
  auth0UserId_in: [String!]
  auth0UserId_lt: String
  auth0UserId_lte: String
  auth0UserId_not: String
  auth0UserId_not_contains: String
  auth0UserId_not_ends_with: String
  auth0UserId_not_in: [String!]
  auth0UserId_not_starts_with: String
  auth0UserId_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  flowdockName: String
  flowdockName_contains: String
  flowdockName_ends_with: String
  flowdockName_gt: String
  flowdockName_gte: String
  flowdockName_in: [String!]
  flowdockName_lt: String
  flowdockName_lte: String
  flowdockName_not: String
  flowdockName_not_contains: String
  flowdockName_not_ends_with: String
  flowdockName_not_in: [String!]
  flowdockName_not_starts_with: String
  flowdockName_starts_with: String
  githubName: String
  githubName_contains: String
  githubName_ends_with: String
  githubName_gt: String
  githubName_gte: String
  githubName_in: [String!]
  githubName_lt: String
  githubName_lte: String
  githubName_not: String
  githubName_not_contains: String
  githubName_not_ends_with: String
  githubName_not_in: [String!]
  githubName_not_starts_with: String
  githubName_starts_with: String
  hasCompletedWizard: Boolean
  hasCompletedWizard_not: Boolean
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  picture: String
  picture_contains: String
  picture_ends_with: String
  picture_gt: String
  picture_gte: String
  picture_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_not: String
  picture_not_contains: String
  picture_not_ends_with: String
  picture_not_in: [String!]
  picture_not_starts_with: String
  picture_starts_with: String
  projectsChampioned_every: ProjectWhereInput
  projectsChampioned_none: ProjectWhereInput
  projectsChampioned_some: ProjectWhereInput
  role: UserRole
  role_in: [UserRole!]
  role_not: UserRole
  role_not_in: [UserRole!]
  skills_every: SkillWhereInput
  skills_none: SkillWhereInput
  skills_some: SkillWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input UserWhereUniqueInput {
  auth0UserId: String
  email: String
  id: ID
}
