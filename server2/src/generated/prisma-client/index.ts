// Code generated by Prisma (prisma@1.29.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  project: (where?: ProjectWhereInput) => Promise<boolean>;
  skill: (where?: SkillWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  project: (where: ProjectWhereUniqueInput) => ProjectPromise;
  projects: (
    args?: {
      where?: ProjectWhereInput;
      orderBy?: ProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Project>;
  projectsConnection: (
    args?: {
      where?: ProjectWhereInput;
      orderBy?: ProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProjectConnectionPromise;
  skill: (where: SkillWhereUniqueInput) => SkillPromise;
  skills: (
    args?: {
      where?: SkillWhereInput;
      orderBy?: SkillOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Skill>;
  skillsConnection: (
    args?: {
      where?: SkillWhereInput;
      orderBy?: SkillOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SkillConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createProject: (data: ProjectCreateInput) => ProjectPromise;
  updateProject: (
    args: { data: ProjectUpdateInput; where: ProjectWhereUniqueInput }
  ) => ProjectPromise;
  updateManyProjects: (
    args: { data: ProjectUpdateManyMutationInput; where?: ProjectWhereInput }
  ) => BatchPayloadPromise;
  upsertProject: (
    args: {
      where: ProjectWhereUniqueInput;
      create: ProjectCreateInput;
      update: ProjectUpdateInput;
    }
  ) => ProjectPromise;
  deleteProject: (where: ProjectWhereUniqueInput) => ProjectPromise;
  deleteManyProjects: (where?: ProjectWhereInput) => BatchPayloadPromise;
  createSkill: (data: SkillCreateInput) => SkillPromise;
  updateSkill: (
    args: { data: SkillUpdateInput; where: SkillWhereUniqueInput }
  ) => SkillPromise;
  updateManySkills: (
    args: { data: SkillUpdateManyMutationInput; where?: SkillWhereInput }
  ) => BatchPayloadPromise;
  upsertSkill: (
    args: {
      where: SkillWhereUniqueInput;
      create: SkillCreateInput;
      update: SkillUpdateInput;
    }
  ) => SkillPromise;
  deleteSkill: (where: SkillWhereUniqueInput) => SkillPromise;
  deleteManySkills: (where?: SkillWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  project: (
    where?: ProjectSubscriptionWhereInput
  ) => ProjectSubscriptionPayloadSubscription;
  skill: (
    where?: SkillSubscriptionWhereInput
  ) => SkillSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserRole = "REGULAR" | "ADMIN";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "auth0UserId_ASC"
  | "auth0UserId_DESC"
  | "picture_ASC"
  | "picture_DESC"
  | "githubName_ASC"
  | "githubName_DESC"
  | "flowdockName_ASC"
  | "flowdockName_DESC"
  | "description_ASC"
  | "description_DESC"
  | "hasCompletedWizard_ASC"
  | "hasCompletedWizard_DESC"
  | "role_ASC"
  | "role_DESC";

export type ProjectStatus =
  | "Idea"
  | "Pitch"
  | "Exploration"
  | "ActiveDevelopment"
  | "Support"
  | "Inactive";

export type ProjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "headerImage_ASC"
  | "headerImage_DESC"
  | "status_ASC"
  | "status_DESC"
  | "description_ASC"
  | "description_DESC"
  | "cfapiProjectId_ASC"
  | "cfapiProjectId_DESC"
  | "repoName_ASC"
  | "repoName_DESC";

export type SkillOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface SkillUpdateWithWhereUniqueWithoutUsersWithSkillInput {
  where: SkillWhereUniqueInput;
  data: SkillUpdateWithoutUsersWithSkillDataInput;
}

export type ProjectWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
  cfapiProjectId?: String;
  repoName?: String;
}>;

export interface UserCreateWithoutSkillsInput {
  email: String;
  name?: String;
  auth0UserId: String;
  picture?: String;
  githubName?: String;
  flowdockName?: String;
  description?: String;
  hasCompletedWizard?: Boolean;
  role?: UserRole;
  projectsChampioned?: ProjectCreateManyWithoutChampionsInput;
}

export interface UserUpdateWithoutSkillsDataInput {
  email?: String;
  name?: String;
  auth0UserId?: String;
  picture?: String;
  githubName?: String;
  flowdockName?: String;
  description?: String;
  hasCompletedWizard?: Boolean;
  role?: UserRole;
  projectsChampioned?: ProjectUpdateManyWithoutChampionsInput;
}

export interface ProjectCreateManyWithoutChampionsInput {
  create?:
    | ProjectCreateWithoutChampionsInput[]
    | ProjectCreateWithoutChampionsInput;
  connect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
}

export interface ProjectUpdateWithoutSkillsDataInput {
  name?: String;
  headerImage?: String;
  status?: ProjectStatus;
  description?: String;
  cfapiProjectId?: String;
  repoName?: String;
  champions?: UserUpdateManyWithoutProjectsChampionedInput;
}

export interface ProjectCreateWithoutChampionsInput {
  name: String;
  headerImage?: String;
  status?: ProjectStatus;
  description?: String;
  cfapiProjectId?: String;
  repoName?: String;
  skills?: SkillCreateManyWithoutProjectsWithSkillInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  auth0UserId?: String;
  auth0UserId_not?: String;
  auth0UserId_in?: String[] | String;
  auth0UserId_not_in?: String[] | String;
  auth0UserId_lt?: String;
  auth0UserId_lte?: String;
  auth0UserId_gt?: String;
  auth0UserId_gte?: String;
  auth0UserId_contains?: String;
  auth0UserId_not_contains?: String;
  auth0UserId_starts_with?: String;
  auth0UserId_not_starts_with?: String;
  auth0UserId_ends_with?: String;
  auth0UserId_not_ends_with?: String;
  picture?: String;
  picture_not?: String;
  picture_in?: String[] | String;
  picture_not_in?: String[] | String;
  picture_lt?: String;
  picture_lte?: String;
  picture_gt?: String;
  picture_gte?: String;
  picture_contains?: String;
  picture_not_contains?: String;
  picture_starts_with?: String;
  picture_not_starts_with?: String;
  picture_ends_with?: String;
  picture_not_ends_with?: String;
  githubName?: String;
  githubName_not?: String;
  githubName_in?: String[] | String;
  githubName_not_in?: String[] | String;
  githubName_lt?: String;
  githubName_lte?: String;
  githubName_gt?: String;
  githubName_gte?: String;
  githubName_contains?: String;
  githubName_not_contains?: String;
  githubName_starts_with?: String;
  githubName_not_starts_with?: String;
  githubName_ends_with?: String;
  githubName_not_ends_with?: String;
  flowdockName?: String;
  flowdockName_not?: String;
  flowdockName_in?: String[] | String;
  flowdockName_not_in?: String[] | String;
  flowdockName_lt?: String;
  flowdockName_lte?: String;
  flowdockName_gt?: String;
  flowdockName_gte?: String;
  flowdockName_contains?: String;
  flowdockName_not_contains?: String;
  flowdockName_starts_with?: String;
  flowdockName_not_starts_with?: String;
  flowdockName_ends_with?: String;
  flowdockName_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  hasCompletedWizard?: Boolean;
  hasCompletedWizard_not?: Boolean;
  role?: UserRole;
  role_not?: UserRole;
  role_in?: UserRole[] | UserRole;
  role_not_in?: UserRole[] | UserRole;
  projectsChampioned_every?: ProjectWhereInput;
  projectsChampioned_some?: ProjectWhereInput;
  projectsChampioned_none?: ProjectWhereInput;
  skills_every?: SkillWhereInput;
  skills_some?: SkillWhereInput;
  skills_none?: SkillWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface ProjectUpdateInput {
  name?: String;
  headerImage?: String;
  status?: ProjectStatus;
  description?: String;
  cfapiProjectId?: String;
  repoName?: String;
  champions?: UserUpdateManyWithoutProjectsChampionedInput;
  skills?: SkillUpdateManyWithoutProjectsWithSkillInput;
}

export interface SkillSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SkillWhereInput;
  AND?: SkillSubscriptionWhereInput[] | SkillSubscriptionWhereInput;
  OR?: SkillSubscriptionWhereInput[] | SkillSubscriptionWhereInput;
  NOT?: SkillSubscriptionWhereInput[] | SkillSubscriptionWhereInput;
}

export interface UserUpdateManyWithoutProjectsChampionedInput {
  create?:
    | UserCreateWithoutProjectsChampionedInput[]
    | UserCreateWithoutProjectsChampionedInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutProjectsChampionedInput[]
    | UserUpdateWithWhereUniqueWithoutProjectsChampionedInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutProjectsChampionedInput[]
    | UserUpsertWithWhereUniqueWithoutProjectsChampionedInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  name?: String;
  auth0UserId?: String;
  picture?: String;
  githubName?: String;
  flowdockName?: String;
  description?: String;
  hasCompletedWizard?: Boolean;
  role?: UserRole;
}

export interface UserUpdateWithWhereUniqueWithoutProjectsChampionedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutProjectsChampionedDataInput;
}

export interface UserCreateInput {
  email: String;
  name?: String;
  auth0UserId: String;
  picture?: String;
  githubName?: String;
  flowdockName?: String;
  description?: String;
  hasCompletedWizard?: Boolean;
  role?: UserRole;
  projectsChampioned?: ProjectCreateManyWithoutChampionsInput;
  skills?: SkillCreateManyWithoutUsersWithSkillInput;
}

export interface UserUpdateWithoutProjectsChampionedDataInput {
  email?: String;
  name?: String;
  auth0UserId?: String;
  picture?: String;
  githubName?: String;
  flowdockName?: String;
  description?: String;
  hasCompletedWizard?: Boolean;
  role?: UserRole;
  skills?: SkillUpdateManyWithoutUsersWithSkillInput;
}

export interface SkillUpdateInput {
  name?: String;
  usersWithSkill?: UserUpdateManyWithoutSkillsInput;
  projectsWithSkill?: ProjectUpdateManyWithoutSkillsInput;
}

export interface SkillUpdateManyWithoutUsersWithSkillInput {
  create?:
    | SkillCreateWithoutUsersWithSkillInput[]
    | SkillCreateWithoutUsersWithSkillInput;
  delete?: SkillWhereUniqueInput[] | SkillWhereUniqueInput;
  connect?: SkillWhereUniqueInput[] | SkillWhereUniqueInput;
  set?: SkillWhereUniqueInput[] | SkillWhereUniqueInput;
  disconnect?: SkillWhereUniqueInput[] | SkillWhereUniqueInput;
  update?:
    | SkillUpdateWithWhereUniqueWithoutUsersWithSkillInput[]
    | SkillUpdateWithWhereUniqueWithoutUsersWithSkillInput;
  upsert?:
    | SkillUpsertWithWhereUniqueWithoutUsersWithSkillInput[]
    | SkillUpsertWithWhereUniqueWithoutUsersWithSkillInput;
  deleteMany?: SkillScalarWhereInput[] | SkillScalarWhereInput;
  updateMany?:
    | SkillUpdateManyWithWhereNestedInput[]
    | SkillUpdateManyWithWhereNestedInput;
}

export type SkillWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface ProjectUpdateManyWithoutChampionsInput {
  create?:
    | ProjectCreateWithoutChampionsInput[]
    | ProjectCreateWithoutChampionsInput;
  delete?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  connect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  set?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  disconnect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  update?:
    | ProjectUpdateWithWhereUniqueWithoutChampionsInput[]
    | ProjectUpdateWithWhereUniqueWithoutChampionsInput;
  upsert?:
    | ProjectUpsertWithWhereUniqueWithoutChampionsInput[]
    | ProjectUpsertWithWhereUniqueWithoutChampionsInput;
  deleteMany?: ProjectScalarWhereInput[] | ProjectScalarWhereInput;
  updateMany?:
    | ProjectUpdateManyWithWhereNestedInput[]
    | ProjectUpdateManyWithWhereNestedInput;
}

export interface SkillUpsertWithWhereUniqueWithoutProjectsWithSkillInput {
  where: SkillWhereUniqueInput;
  update: SkillUpdateWithoutProjectsWithSkillDataInput;
  create: SkillCreateWithoutProjectsWithSkillInput;
}

export interface SkillUpdateWithoutUsersWithSkillDataInput {
  name?: String;
  projectsWithSkill?: ProjectUpdateManyWithoutSkillsInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  auth0UserId?: String;
}>;

export interface ProjectUpdateManyWithoutSkillsInput {
  create?: ProjectCreateWithoutSkillsInput[] | ProjectCreateWithoutSkillsInput;
  delete?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  connect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  set?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  disconnect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  update?:
    | ProjectUpdateWithWhereUniqueWithoutSkillsInput[]
    | ProjectUpdateWithWhereUniqueWithoutSkillsInput;
  upsert?:
    | ProjectUpsertWithWhereUniqueWithoutSkillsInput[]
    | ProjectUpsertWithWhereUniqueWithoutSkillsInput;
  deleteMany?: ProjectScalarWhereInput[] | ProjectScalarWhereInput;
  updateMany?:
    | ProjectUpdateManyWithWhereNestedInput[]
    | ProjectUpdateManyWithWhereNestedInput;
}

export interface ProjectUpdateWithoutChampionsDataInput {
  name?: String;
  headerImage?: String;
  status?: ProjectStatus;
  description?: String;
  cfapiProjectId?: String;
  repoName?: String;
  skills?: SkillUpdateManyWithoutProjectsWithSkillInput;
}

export interface ProjectUpdateWithWhereUniqueWithoutSkillsInput {
  where: ProjectWhereUniqueInput;
  data: ProjectUpdateWithoutSkillsDataInput;
}

export interface UserCreateManyWithoutProjectsChampionedInput {
  create?:
    | UserCreateWithoutProjectsChampionedInput[]
    | UserCreateWithoutProjectsChampionedInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface ProjectWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  headerImage?: String;
  headerImage_not?: String;
  headerImage_in?: String[] | String;
  headerImage_not_in?: String[] | String;
  headerImage_lt?: String;
  headerImage_lte?: String;
  headerImage_gt?: String;
  headerImage_gte?: String;
  headerImage_contains?: String;
  headerImage_not_contains?: String;
  headerImage_starts_with?: String;
  headerImage_not_starts_with?: String;
  headerImage_ends_with?: String;
  headerImage_not_ends_with?: String;
  status?: ProjectStatus;
  status_not?: ProjectStatus;
  status_in?: ProjectStatus[] | ProjectStatus;
  status_not_in?: ProjectStatus[] | ProjectStatus;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  cfapiProjectId?: String;
  cfapiProjectId_not?: String;
  cfapiProjectId_in?: String[] | String;
  cfapiProjectId_not_in?: String[] | String;
  cfapiProjectId_lt?: String;
  cfapiProjectId_lte?: String;
  cfapiProjectId_gt?: String;
  cfapiProjectId_gte?: String;
  cfapiProjectId_contains?: String;
  cfapiProjectId_not_contains?: String;
  cfapiProjectId_starts_with?: String;
  cfapiProjectId_not_starts_with?: String;
  cfapiProjectId_ends_with?: String;
  cfapiProjectId_not_ends_with?: String;
  repoName?: String;
  repoName_not?: String;
  repoName_in?: String[] | String;
  repoName_not_in?: String[] | String;
  repoName_lt?: String;
  repoName_lte?: String;
  repoName_gt?: String;
  repoName_gte?: String;
  repoName_contains?: String;
  repoName_not_contains?: String;
  repoName_starts_with?: String;
  repoName_not_starts_with?: String;
  repoName_ends_with?: String;
  repoName_not_ends_with?: String;
  champions_every?: UserWhereInput;
  champions_some?: UserWhereInput;
  champions_none?: UserWhereInput;
  skills_every?: SkillWhereInput;
  skills_some?: SkillWhereInput;
  skills_none?: SkillWhereInput;
  AND?: ProjectWhereInput[] | ProjectWhereInput;
  OR?: ProjectWhereInput[] | ProjectWhereInput;
  NOT?: ProjectWhereInput[] | ProjectWhereInput;
}

export interface SkillCreateManyWithoutUsersWithSkillInput {
  create?:
    | SkillCreateWithoutUsersWithSkillInput[]
    | SkillCreateWithoutUsersWithSkillInput;
  connect?: SkillWhereUniqueInput[] | SkillWhereUniqueInput;
}

export interface ProjectUpsertWithWhereUniqueWithoutSkillsInput {
  where: ProjectWhereUniqueInput;
  update: ProjectUpdateWithoutSkillsDataInput;
  create: ProjectCreateWithoutSkillsInput;
}

export interface ProjectCreateManyWithoutSkillsInput {
  create?: ProjectCreateWithoutSkillsInput[] | ProjectCreateWithoutSkillsInput;
  connect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
}

export interface ProjectScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  headerImage?: String;
  headerImage_not?: String;
  headerImage_in?: String[] | String;
  headerImage_not_in?: String[] | String;
  headerImage_lt?: String;
  headerImage_lte?: String;
  headerImage_gt?: String;
  headerImage_gte?: String;
  headerImage_contains?: String;
  headerImage_not_contains?: String;
  headerImage_starts_with?: String;
  headerImage_not_starts_with?: String;
  headerImage_ends_with?: String;
  headerImage_not_ends_with?: String;
  status?: ProjectStatus;
  status_not?: ProjectStatus;
  status_in?: ProjectStatus[] | ProjectStatus;
  status_not_in?: ProjectStatus[] | ProjectStatus;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  cfapiProjectId?: String;
  cfapiProjectId_not?: String;
  cfapiProjectId_in?: String[] | String;
  cfapiProjectId_not_in?: String[] | String;
  cfapiProjectId_lt?: String;
  cfapiProjectId_lte?: String;
  cfapiProjectId_gt?: String;
  cfapiProjectId_gte?: String;
  cfapiProjectId_contains?: String;
  cfapiProjectId_not_contains?: String;
  cfapiProjectId_starts_with?: String;
  cfapiProjectId_not_starts_with?: String;
  cfapiProjectId_ends_with?: String;
  cfapiProjectId_not_ends_with?: String;
  repoName?: String;
  repoName_not?: String;
  repoName_in?: String[] | String;
  repoName_not_in?: String[] | String;
  repoName_lt?: String;
  repoName_lte?: String;
  repoName_gt?: String;
  repoName_gte?: String;
  repoName_contains?: String;
  repoName_not_contains?: String;
  repoName_starts_with?: String;
  repoName_not_starts_with?: String;
  repoName_ends_with?: String;
  repoName_not_ends_with?: String;
  AND?: ProjectScalarWhereInput[] | ProjectScalarWhereInput;
  OR?: ProjectScalarWhereInput[] | ProjectScalarWhereInput;
  NOT?: ProjectScalarWhereInput[] | ProjectScalarWhereInput;
}

export interface SkillCreateManyWithoutProjectsWithSkillInput {
  create?:
    | SkillCreateWithoutProjectsWithSkillInput[]
    | SkillCreateWithoutProjectsWithSkillInput;
  connect?: SkillWhereUniqueInput[] | SkillWhereUniqueInput;
}

export interface ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput;
  data: ProjectUpdateManyDataInput;
}

export interface UserCreateManyWithoutSkillsInput {
  create?: UserCreateWithoutSkillsInput[] | UserCreateWithoutSkillsInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface ProjectUpdateManyDataInput {
  name?: String;
  headerImage?: String;
  status?: ProjectStatus;
  description?: String;
  cfapiProjectId?: String;
  repoName?: String;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface SkillUpsertWithWhereUniqueWithoutUsersWithSkillInput {
  where: SkillWhereUniqueInput;
  update: SkillUpdateWithoutUsersWithSkillDataInput;
  create: SkillCreateWithoutUsersWithSkillInput;
}

export interface UserUpdateInput {
  email?: String;
  name?: String;
  auth0UserId?: String;
  picture?: String;
  githubName?: String;
  flowdockName?: String;
  description?: String;
  hasCompletedWizard?: Boolean;
  role?: UserRole;
  projectsChampioned?: ProjectUpdateManyWithoutChampionsInput;
  skills?: SkillUpdateManyWithoutUsersWithSkillInput;
}

export interface SkillScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: SkillScalarWhereInput[] | SkillScalarWhereInput;
  OR?: SkillScalarWhereInput[] | SkillScalarWhereInput;
  NOT?: SkillScalarWhereInput[] | SkillScalarWhereInput;
}

export interface SkillCreateInput {
  name: String;
  usersWithSkill?: UserCreateManyWithoutSkillsInput;
  projectsWithSkill?: ProjectCreateManyWithoutSkillsInput;
}

export interface SkillUpdateManyWithWhereNestedInput {
  where: SkillScalarWhereInput;
  data: SkillUpdateManyDataInput;
}

export interface UserUpsertWithWhereUniqueWithoutSkillsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutSkillsDataInput;
  create: UserCreateWithoutSkillsInput;
}

export interface SkillUpdateManyDataInput {
  name?: String;
}

export interface ProjectUpdateWithWhereUniqueWithoutChampionsInput {
  where: ProjectWhereUniqueInput;
  data: ProjectUpdateWithoutChampionsDataInput;
}

export interface UserUpsertWithWhereUniqueWithoutProjectsChampionedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutProjectsChampionedDataInput;
  create: UserCreateWithoutProjectsChampionedInput;
}

export interface UserCreateWithoutProjectsChampionedInput {
  email: String;
  name?: String;
  auth0UserId: String;
  picture?: String;
  githubName?: String;
  flowdockName?: String;
  description?: String;
  hasCompletedWizard?: Boolean;
  role?: UserRole;
  skills?: SkillCreateManyWithoutUsersWithSkillInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  auth0UserId?: String;
  auth0UserId_not?: String;
  auth0UserId_in?: String[] | String;
  auth0UserId_not_in?: String[] | String;
  auth0UserId_lt?: String;
  auth0UserId_lte?: String;
  auth0UserId_gt?: String;
  auth0UserId_gte?: String;
  auth0UserId_contains?: String;
  auth0UserId_not_contains?: String;
  auth0UserId_starts_with?: String;
  auth0UserId_not_starts_with?: String;
  auth0UserId_ends_with?: String;
  auth0UserId_not_ends_with?: String;
  picture?: String;
  picture_not?: String;
  picture_in?: String[] | String;
  picture_not_in?: String[] | String;
  picture_lt?: String;
  picture_lte?: String;
  picture_gt?: String;
  picture_gte?: String;
  picture_contains?: String;
  picture_not_contains?: String;
  picture_starts_with?: String;
  picture_not_starts_with?: String;
  picture_ends_with?: String;
  picture_not_ends_with?: String;
  githubName?: String;
  githubName_not?: String;
  githubName_in?: String[] | String;
  githubName_not_in?: String[] | String;
  githubName_lt?: String;
  githubName_lte?: String;
  githubName_gt?: String;
  githubName_gte?: String;
  githubName_contains?: String;
  githubName_not_contains?: String;
  githubName_starts_with?: String;
  githubName_not_starts_with?: String;
  githubName_ends_with?: String;
  githubName_not_ends_with?: String;
  flowdockName?: String;
  flowdockName_not?: String;
  flowdockName_in?: String[] | String;
  flowdockName_not_in?: String[] | String;
  flowdockName_lt?: String;
  flowdockName_lte?: String;
  flowdockName_gt?: String;
  flowdockName_gte?: String;
  flowdockName_contains?: String;
  flowdockName_not_contains?: String;
  flowdockName_starts_with?: String;
  flowdockName_not_starts_with?: String;
  flowdockName_ends_with?: String;
  flowdockName_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  hasCompletedWizard?: Boolean;
  hasCompletedWizard_not?: Boolean;
  role?: UserRole;
  role_not?: UserRole;
  role_in?: UserRole[] | UserRole;
  role_not_in?: UserRole[] | UserRole;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface ProjectCreateWithoutSkillsInput {
  name: String;
  headerImage?: String;
  status?: ProjectStatus;
  description?: String;
  cfapiProjectId?: String;
  repoName?: String;
  champions?: UserCreateManyWithoutProjectsChampionedInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface SkillWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  usersWithSkill_every?: UserWhereInput;
  usersWithSkill_some?: UserWhereInput;
  usersWithSkill_none?: UserWhereInput;
  projectsWithSkill_every?: ProjectWhereInput;
  projectsWithSkill_some?: ProjectWhereInput;
  projectsWithSkill_none?: ProjectWhereInput;
  AND?: SkillWhereInput[] | SkillWhereInput;
  OR?: SkillWhereInput[] | SkillWhereInput;
  NOT?: SkillWhereInput[] | SkillWhereInput;
}

export interface UserUpdateManyDataInput {
  email?: String;
  name?: String;
  auth0UserId?: String;
  picture?: String;
  githubName?: String;
  flowdockName?: String;
  description?: String;
  hasCompletedWizard?: Boolean;
  role?: UserRole;
}

export interface SkillUpdateManyMutationInput {
  name?: String;
}

export interface SkillUpdateManyWithoutProjectsWithSkillInput {
  create?:
    | SkillCreateWithoutProjectsWithSkillInput[]
    | SkillCreateWithoutProjectsWithSkillInput;
  delete?: SkillWhereUniqueInput[] | SkillWhereUniqueInput;
  connect?: SkillWhereUniqueInput[] | SkillWhereUniqueInput;
  set?: SkillWhereUniqueInput[] | SkillWhereUniqueInput;
  disconnect?: SkillWhereUniqueInput[] | SkillWhereUniqueInput;
  update?:
    | SkillUpdateWithWhereUniqueWithoutProjectsWithSkillInput[]
    | SkillUpdateWithWhereUniqueWithoutProjectsWithSkillInput;
  upsert?:
    | SkillUpsertWithWhereUniqueWithoutProjectsWithSkillInput[]
    | SkillUpsertWithWhereUniqueWithoutProjectsWithSkillInput;
  deleteMany?: SkillScalarWhereInput[] | SkillScalarWhereInput;
  updateMany?:
    | SkillUpdateManyWithWhereNestedInput[]
    | SkillUpdateManyWithWhereNestedInput;
}

export interface ProjectUpsertWithWhereUniqueWithoutChampionsInput {
  where: ProjectWhereUniqueInput;
  update: ProjectUpdateWithoutChampionsDataInput;
  create: ProjectCreateWithoutChampionsInput;
}

export interface UserUpdateWithWhereUniqueWithoutSkillsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutSkillsDataInput;
}

export interface UserUpdateManyWithoutSkillsInput {
  create?: UserCreateWithoutSkillsInput[] | UserCreateWithoutSkillsInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutSkillsInput[]
    | UserUpdateWithWhereUniqueWithoutSkillsInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutSkillsInput[]
    | UserUpsertWithWhereUniqueWithoutSkillsInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface SkillUpdateWithoutProjectsWithSkillDataInput {
  name?: String;
  usersWithSkill?: UserUpdateManyWithoutSkillsInput;
}

export interface SkillUpdateWithWhereUniqueWithoutProjectsWithSkillInput {
  where: SkillWhereUniqueInput;
  data: SkillUpdateWithoutProjectsWithSkillDataInput;
}

export interface ProjectCreateInput {
  name: String;
  headerImage?: String;
  status?: ProjectStatus;
  description?: String;
  cfapiProjectId?: String;
  repoName?: String;
  champions?: UserCreateManyWithoutProjectsChampionedInput;
  skills?: SkillCreateManyWithoutProjectsWithSkillInput;
}

export interface ProjectUpdateManyMutationInput {
  name?: String;
  headerImage?: String;
  status?: ProjectStatus;
  description?: String;
  cfapiProjectId?: String;
  repoName?: String;
}

export interface ProjectSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProjectWhereInput;
  AND?: ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput;
  OR?: ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput;
  NOT?: ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput;
}

export interface SkillCreateWithoutProjectsWithSkillInput {
  name: String;
  usersWithSkill?: UserCreateManyWithoutSkillsInput;
}

export interface SkillCreateWithoutUsersWithSkillInput {
  name: String;
  projectsWithSkill?: ProjectCreateManyWithoutSkillsInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  name?: String;
  auth0UserId: String;
  picture?: String;
  githubName?: String;
  flowdockName?: String;
  description?: String;
  hasCompletedWizard?: Boolean;
  role?: UserRole;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  auth0UserId: () => Promise<String>;
  picture: () => Promise<String>;
  githubName: () => Promise<String>;
  flowdockName: () => Promise<String>;
  description: () => Promise<String>;
  hasCompletedWizard: () => Promise<Boolean>;
  role: () => Promise<UserRole>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  auth0UserId: () => Promise<AsyncIterator<String>>;
  picture: () => Promise<AsyncIterator<String>>;
  githubName: () => Promise<AsyncIterator<String>>;
  flowdockName: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  hasCompletedWizard: () => Promise<AsyncIterator<Boolean>>;
  role: () => Promise<AsyncIterator<UserRole>>;
}

export interface ProjectEdge {
  node: Project;
  cursor: String;
}

export interface ProjectEdgePromise extends Promise<ProjectEdge>, Fragmentable {
  node: <T = ProjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectEdgeSubscription
  extends Promise<AsyncIterator<ProjectEdge>>,
    Fragmentable {
  node: <T = ProjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  name?: String;
  auth0UserId: String;
  picture?: String;
  githubName?: String;
  flowdockName?: String;
  description?: String;
  hasCompletedWizard?: Boolean;
  role?: UserRole;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  auth0UserId: () => Promise<String>;
  picture: () => Promise<String>;
  githubName: () => Promise<String>;
  flowdockName: () => Promise<String>;
  description: () => Promise<String>;
  hasCompletedWizard: () => Promise<Boolean>;
  role: () => Promise<UserRole>;
  projectsChampioned: <T = FragmentableArray<Project>>(
    args?: {
      where?: ProjectWhereInput;
      orderBy?: ProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  skills: <T = FragmentableArray<Skill>>(
    args?: {
      where?: SkillWhereInput;
      orderBy?: SkillOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  auth0UserId: () => Promise<AsyncIterator<String>>;
  picture: () => Promise<AsyncIterator<String>>;
  githubName: () => Promise<AsyncIterator<String>>;
  flowdockName: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  hasCompletedWizard: () => Promise<AsyncIterator<Boolean>>;
  role: () => Promise<AsyncIterator<UserRole>>;
  projectsChampioned: <T = Promise<AsyncIterator<ProjectSubscription>>>(
    args?: {
      where?: ProjectWhereInput;
      orderBy?: ProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  skills: <T = Promise<AsyncIterator<SkillSubscription>>>(
    args?: {
      where?: SkillWhereInput;
      orderBy?: SkillOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ProjectConnection {
  pageInfo: PageInfo;
  edges: ProjectEdge[];
}

export interface ProjectConnectionPromise
  extends Promise<ProjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectEdge>>() => T;
  aggregate: <T = AggregateProjectPromise>() => T;
}

export interface ProjectConnectionSubscription
  extends Promise<AsyncIterator<ProjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface Skill {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface SkillPromise extends Promise<Skill>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  usersWithSkill: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  projectsWithSkill: <T = FragmentableArray<Project>>(
    args?: {
      where?: ProjectWhereInput;
      orderBy?: ProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface SkillSubscription
  extends Promise<AsyncIterator<Skill>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  usersWithSkill: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  projectsWithSkill: <T = Promise<AsyncIterator<ProjectSubscription>>>(
    args?: {
      where?: ProjectWhereInput;
      orderBy?: ProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface SkillEdge {
  node: Skill;
  cursor: String;
}

export interface SkillEdgePromise extends Promise<SkillEdge>, Fragmentable {
  node: <T = SkillPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SkillEdgeSubscription
  extends Promise<AsyncIterator<SkillEdge>>,
    Fragmentable {
  node: <T = SkillSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Project {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  headerImage?: String;
  status?: ProjectStatus;
  description?: String;
  cfapiProjectId?: String;
  repoName?: String;
}

export interface ProjectPromise extends Promise<Project>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  headerImage: () => Promise<String>;
  status: () => Promise<ProjectStatus>;
  description: () => Promise<String>;
  cfapiProjectId: () => Promise<String>;
  repoName: () => Promise<String>;
  champions: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  skills: <T = FragmentableArray<Skill>>(
    args?: {
      where?: SkillWhereInput;
      orderBy?: SkillOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ProjectSubscription
  extends Promise<AsyncIterator<Project>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  headerImage: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<ProjectStatus>>;
  description: () => Promise<AsyncIterator<String>>;
  cfapiProjectId: () => Promise<AsyncIterator<String>>;
  repoName: () => Promise<AsyncIterator<String>>;
  champions: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  skills: <T = Promise<AsyncIterator<SkillSubscription>>>(
    args?: {
      where?: SkillWhereInput;
      orderBy?: SkillOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateProject {
  count: Int;
}

export interface AggregateProjectPromise
  extends Promise<AggregateProject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectSubscription
  extends Promise<AsyncIterator<AggregateProject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProjectPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  headerImage?: String;
  status?: ProjectStatus;
  description?: String;
  cfapiProjectId?: String;
  repoName?: String;
}

export interface ProjectPreviousValuesPromise
  extends Promise<ProjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  headerImage: () => Promise<String>;
  status: () => Promise<ProjectStatus>;
  description: () => Promise<String>;
  cfapiProjectId: () => Promise<String>;
  repoName: () => Promise<String>;
}

export interface ProjectPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  headerImage: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<ProjectStatus>>;
  description: () => Promise<AsyncIterator<String>>;
  cfapiProjectId: () => Promise<AsyncIterator<String>>;
  repoName: () => Promise<AsyncIterator<String>>;
}

export interface ProjectSubscriptionPayload {
  mutation: MutationType;
  node: Project;
  updatedFields: String[];
  previousValues: ProjectPreviousValues;
}

export interface ProjectSubscriptionPayloadPromise
  extends Promise<ProjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectPreviousValuesPromise>() => T;
}

export interface ProjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectPreviousValuesSubscription>() => T;
}

export interface SkillSubscriptionPayload {
  mutation: MutationType;
  node: Skill;
  updatedFields: String[];
  previousValues: SkillPreviousValues;
}

export interface SkillSubscriptionPayloadPromise
  extends Promise<SkillSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SkillPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SkillPreviousValuesPromise>() => T;
}

export interface SkillSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SkillSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SkillSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SkillPreviousValuesSubscription>() => T;
}

export interface SkillPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface SkillPreviousValuesPromise
  extends Promise<SkillPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface SkillPreviousValuesSubscription
  extends Promise<AsyncIterator<SkillPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface SkillConnection {
  pageInfo: PageInfo;
  edges: SkillEdge[];
}

export interface SkillConnectionPromise
  extends Promise<SkillConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SkillEdge>>() => T;
  aggregate: <T = AggregateSkillPromise>() => T;
}

export interface SkillConnectionSubscription
  extends Promise<AsyncIterator<SkillConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SkillEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSkillSubscription>() => T;
}

export interface AggregateSkill {
  count: Int;
}

export interface AggregateSkillPromise
  extends Promise<AggregateSkill>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSkillSubscription
  extends Promise<AsyncIterator<AggregateSkill>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "UserRole",
    embedded: false
  },
  {
    name: "ProjectStatus",
    embedded: false
  },
  {
    name: "Project",
    embedded: false
  },
  {
    name: "Skill",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://us1.prisma.sh/willygdouglas/members-spike/dev`
});
export const prisma = new Prisma();
