// Code generated by Prisma (prisma@1.29.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateProject {
  count: Int!
}

type AggregateSkill {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createProject(data: ProjectCreateInput!): Project!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  createSkill(data: SkillCreateInput!): Skill!
  updateSkill(data: SkillUpdateInput!, where: SkillWhereUniqueInput!): Skill
  updateManySkills(data: SkillUpdateManyMutationInput!, where: SkillWhereInput): BatchPayload!
  upsertSkill(where: SkillWhereUniqueInput!, create: SkillCreateInput!, update: SkillUpdateInput!): Skill!
  deleteSkill(where: SkillWhereUniqueInput!): Skill
  deleteManySkills(where: SkillWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Project {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  headerImage: String
  status: ProjectStatus
  description: String
  cfapiProjectId: String
  repoName: String
  champions(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  skills(where: SkillWhereInput, orderBy: SkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Skill!]
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  name: String!
  headerImage: String
  status: ProjectStatus
  description: String
  cfapiProjectId: String
  repoName: String
  champions: UserCreateManyWithoutProjectsChampionedInput
  skills: SkillCreateManyWithoutProjectsWithSkillInput
}

input ProjectCreateManyWithoutChampionsInput {
  create: [ProjectCreateWithoutChampionsInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateManyWithoutSkillsInput {
  create: [ProjectCreateWithoutSkillsInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateWithoutChampionsInput {
  name: String!
  headerImage: String
  status: ProjectStatus
  description: String
  cfapiProjectId: String
  repoName: String
  skills: SkillCreateManyWithoutProjectsWithSkillInput
}

input ProjectCreateWithoutSkillsInput {
  name: String!
  headerImage: String
  status: ProjectStatus
  description: String
  cfapiProjectId: String
  repoName: String
  champions: UserCreateManyWithoutProjectsChampionedInput
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  headerImage_ASC
  headerImage_DESC
  status_ASC
  status_DESC
  description_ASC
  description_DESC
  cfapiProjectId_ASC
  cfapiProjectId_DESC
  repoName_ASC
  repoName_DESC
}

type ProjectPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  headerImage: String
  status: ProjectStatus
  description: String
  cfapiProjectId: String
  repoName: String
}

input ProjectScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  headerImage: String
  headerImage_not: String
  headerImage_in: [String!]
  headerImage_not_in: [String!]
  headerImage_lt: String
  headerImage_lte: String
  headerImage_gt: String
  headerImage_gte: String
  headerImage_contains: String
  headerImage_not_contains: String
  headerImage_starts_with: String
  headerImage_not_starts_with: String
  headerImage_ends_with: String
  headerImage_not_ends_with: String
  status: ProjectStatus
  status_not: ProjectStatus
  status_in: [ProjectStatus!]
  status_not_in: [ProjectStatus!]
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  cfapiProjectId: String
  cfapiProjectId_not: String
  cfapiProjectId_in: [String!]
  cfapiProjectId_not_in: [String!]
  cfapiProjectId_lt: String
  cfapiProjectId_lte: String
  cfapiProjectId_gt: String
  cfapiProjectId_gte: String
  cfapiProjectId_contains: String
  cfapiProjectId_not_contains: String
  cfapiProjectId_starts_with: String
  cfapiProjectId_not_starts_with: String
  cfapiProjectId_ends_with: String
  cfapiProjectId_not_ends_with: String
  repoName: String
  repoName_not: String
  repoName_in: [String!]
  repoName_not_in: [String!]
  repoName_lt: String
  repoName_lte: String
  repoName_gt: String
  repoName_gte: String
  repoName_contains: String
  repoName_not_contains: String
  repoName_starts_with: String
  repoName_not_starts_with: String
  repoName_ends_with: String
  repoName_not_ends_with: String
  AND: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  NOT: [ProjectScalarWhereInput!]
}

enum ProjectStatus {
  Idea
  Pitch
  Exploration
  ActiveDevelopment
  Support
  Inactive
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
  AND: [ProjectSubscriptionWhereInput!]
  OR: [ProjectSubscriptionWhereInput!]
  NOT: [ProjectSubscriptionWhereInput!]
}

input ProjectUpdateInput {
  name: String
  headerImage: String
  status: ProjectStatus
  description: String
  cfapiProjectId: String
  repoName: String
  champions: UserUpdateManyWithoutProjectsChampionedInput
  skills: SkillUpdateManyWithoutProjectsWithSkillInput
}

input ProjectUpdateManyDataInput {
  name: String
  headerImage: String
  status: ProjectStatus
  description: String
  cfapiProjectId: String
  repoName: String
}

input ProjectUpdateManyMutationInput {
  name: String
  headerImage: String
  status: ProjectStatus
  description: String
  cfapiProjectId: String
  repoName: String
}

input ProjectUpdateManyWithoutChampionsInput {
  create: [ProjectCreateWithoutChampionsInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutChampionsInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutChampionsInput!]
  deleteMany: [ProjectScalarWhereInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
}

input ProjectUpdateManyWithoutSkillsInput {
  create: [ProjectCreateWithoutSkillsInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutSkillsInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutSkillsInput!]
  deleteMany: [ProjectScalarWhereInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
}

input ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput!
  data: ProjectUpdateManyDataInput!
}

input ProjectUpdateWithoutChampionsDataInput {
  name: String
  headerImage: String
  status: ProjectStatus
  description: String
  cfapiProjectId: String
  repoName: String
  skills: SkillUpdateManyWithoutProjectsWithSkillInput
}

input ProjectUpdateWithoutSkillsDataInput {
  name: String
  headerImage: String
  status: ProjectStatus
  description: String
  cfapiProjectId: String
  repoName: String
  champions: UserUpdateManyWithoutProjectsChampionedInput
}

input ProjectUpdateWithWhereUniqueWithoutChampionsInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutChampionsDataInput!
}

input ProjectUpdateWithWhereUniqueWithoutSkillsInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutSkillsDataInput!
}

input ProjectUpsertWithWhereUniqueWithoutChampionsInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutChampionsDataInput!
  create: ProjectCreateWithoutChampionsInput!
}

input ProjectUpsertWithWhereUniqueWithoutSkillsInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutSkillsDataInput!
  create: ProjectCreateWithoutSkillsInput!
}

input ProjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  headerImage: String
  headerImage_not: String
  headerImage_in: [String!]
  headerImage_not_in: [String!]
  headerImage_lt: String
  headerImage_lte: String
  headerImage_gt: String
  headerImage_gte: String
  headerImage_contains: String
  headerImage_not_contains: String
  headerImage_starts_with: String
  headerImage_not_starts_with: String
  headerImage_ends_with: String
  headerImage_not_ends_with: String
  status: ProjectStatus
  status_not: ProjectStatus
  status_in: [ProjectStatus!]
  status_not_in: [ProjectStatus!]
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  cfapiProjectId: String
  cfapiProjectId_not: String
  cfapiProjectId_in: [String!]
  cfapiProjectId_not_in: [String!]
  cfapiProjectId_lt: String
  cfapiProjectId_lte: String
  cfapiProjectId_gt: String
  cfapiProjectId_gte: String
  cfapiProjectId_contains: String
  cfapiProjectId_not_contains: String
  cfapiProjectId_starts_with: String
  cfapiProjectId_not_starts_with: String
  cfapiProjectId_ends_with: String
  cfapiProjectId_not_ends_with: String
  repoName: String
  repoName_not: String
  repoName_in: [String!]
  repoName_not_in: [String!]
  repoName_lt: String
  repoName_lte: String
  repoName_gt: String
  repoName_gte: String
  repoName_contains: String
  repoName_not_contains: String
  repoName_starts_with: String
  repoName_not_starts_with: String
  repoName_ends_with: String
  repoName_not_ends_with: String
  champions_every: UserWhereInput
  champions_some: UserWhereInput
  champions_none: UserWhereInput
  skills_every: SkillWhereInput
  skills_some: SkillWhereInput
  skills_none: SkillWhereInput
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
}

input ProjectWhereUniqueInput {
  id: ID
  name: String
  cfapiProjectId: String
  repoName: String
}

type Query {
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  skill(where: SkillWhereUniqueInput!): Skill
  skills(where: SkillWhereInput, orderBy: SkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Skill]!
  skillsConnection(where: SkillWhereInput, orderBy: SkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SkillConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Skill {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  usersWithSkill(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  projectsWithSkill(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
}

type SkillConnection {
  pageInfo: PageInfo!
  edges: [SkillEdge]!
  aggregate: AggregateSkill!
}

input SkillCreateInput {
  name: String!
  usersWithSkill: UserCreateManyWithoutSkillsInput
  projectsWithSkill: ProjectCreateManyWithoutSkillsInput
}

input SkillCreateManyWithoutProjectsWithSkillInput {
  create: [SkillCreateWithoutProjectsWithSkillInput!]
  connect: [SkillWhereUniqueInput!]
}

input SkillCreateManyWithoutUsersWithSkillInput {
  create: [SkillCreateWithoutUsersWithSkillInput!]
  connect: [SkillWhereUniqueInput!]
}

input SkillCreateWithoutProjectsWithSkillInput {
  name: String!
  usersWithSkill: UserCreateManyWithoutSkillsInput
}

input SkillCreateWithoutUsersWithSkillInput {
  name: String!
  projectsWithSkill: ProjectCreateManyWithoutSkillsInput
}

type SkillEdge {
  node: Skill!
  cursor: String!
}

enum SkillOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type SkillPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

input SkillScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [SkillScalarWhereInput!]
  OR: [SkillScalarWhereInput!]
  NOT: [SkillScalarWhereInput!]
}

type SkillSubscriptionPayload {
  mutation: MutationType!
  node: Skill
  updatedFields: [String!]
  previousValues: SkillPreviousValues
}

input SkillSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SkillWhereInput
  AND: [SkillSubscriptionWhereInput!]
  OR: [SkillSubscriptionWhereInput!]
  NOT: [SkillSubscriptionWhereInput!]
}

input SkillUpdateInput {
  name: String
  usersWithSkill: UserUpdateManyWithoutSkillsInput
  projectsWithSkill: ProjectUpdateManyWithoutSkillsInput
}

input SkillUpdateManyDataInput {
  name: String
}

input SkillUpdateManyMutationInput {
  name: String
}

input SkillUpdateManyWithoutProjectsWithSkillInput {
  create: [SkillCreateWithoutProjectsWithSkillInput!]
  delete: [SkillWhereUniqueInput!]
  connect: [SkillWhereUniqueInput!]
  set: [SkillWhereUniqueInput!]
  disconnect: [SkillWhereUniqueInput!]
  update: [SkillUpdateWithWhereUniqueWithoutProjectsWithSkillInput!]
  upsert: [SkillUpsertWithWhereUniqueWithoutProjectsWithSkillInput!]
  deleteMany: [SkillScalarWhereInput!]
  updateMany: [SkillUpdateManyWithWhereNestedInput!]
}

input SkillUpdateManyWithoutUsersWithSkillInput {
  create: [SkillCreateWithoutUsersWithSkillInput!]
  delete: [SkillWhereUniqueInput!]
  connect: [SkillWhereUniqueInput!]
  set: [SkillWhereUniqueInput!]
  disconnect: [SkillWhereUniqueInput!]
  update: [SkillUpdateWithWhereUniqueWithoutUsersWithSkillInput!]
  upsert: [SkillUpsertWithWhereUniqueWithoutUsersWithSkillInput!]
  deleteMany: [SkillScalarWhereInput!]
  updateMany: [SkillUpdateManyWithWhereNestedInput!]
}

input SkillUpdateManyWithWhereNestedInput {
  where: SkillScalarWhereInput!
  data: SkillUpdateManyDataInput!
}

input SkillUpdateWithoutProjectsWithSkillDataInput {
  name: String
  usersWithSkill: UserUpdateManyWithoutSkillsInput
}

input SkillUpdateWithoutUsersWithSkillDataInput {
  name: String
  projectsWithSkill: ProjectUpdateManyWithoutSkillsInput
}

input SkillUpdateWithWhereUniqueWithoutProjectsWithSkillInput {
  where: SkillWhereUniqueInput!
  data: SkillUpdateWithoutProjectsWithSkillDataInput!
}

input SkillUpdateWithWhereUniqueWithoutUsersWithSkillInput {
  where: SkillWhereUniqueInput!
  data: SkillUpdateWithoutUsersWithSkillDataInput!
}

input SkillUpsertWithWhereUniqueWithoutProjectsWithSkillInput {
  where: SkillWhereUniqueInput!
  update: SkillUpdateWithoutProjectsWithSkillDataInput!
  create: SkillCreateWithoutProjectsWithSkillInput!
}

input SkillUpsertWithWhereUniqueWithoutUsersWithSkillInput {
  where: SkillWhereUniqueInput!
  update: SkillUpdateWithoutUsersWithSkillDataInput!
  create: SkillCreateWithoutUsersWithSkillInput!
}

input SkillWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  usersWithSkill_every: UserWhereInput
  usersWithSkill_some: UserWhereInput
  usersWithSkill_none: UserWhereInput
  projectsWithSkill_every: ProjectWhereInput
  projectsWithSkill_some: ProjectWhereInput
  projectsWithSkill_none: ProjectWhereInput
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  NOT: [SkillWhereInput!]
}

input SkillWhereUniqueInput {
  id: ID
  name: String
}

type Subscription {
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  skill(where: SkillSubscriptionWhereInput): SkillSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  name: String
  auth0UserId: String!
  picture: String
  githubName: String
  flowdockName: String
  description: String
  hasCompletedWizard: Boolean
  role: UserRole
  projectsChampioned(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  skills(where: SkillWhereInput, orderBy: SkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Skill!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  name: String
  auth0UserId: String!
  picture: String
  githubName: String
  flowdockName: String
  description: String
  hasCompletedWizard: Boolean
  role: UserRole
  projectsChampioned: ProjectCreateManyWithoutChampionsInput
  skills: SkillCreateManyWithoutUsersWithSkillInput
}

input UserCreateManyWithoutProjectsChampionedInput {
  create: [UserCreateWithoutProjectsChampionedInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutSkillsInput {
  create: [UserCreateWithoutSkillsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutProjectsChampionedInput {
  email: String!
  name: String
  auth0UserId: String!
  picture: String
  githubName: String
  flowdockName: String
  description: String
  hasCompletedWizard: Boolean
  role: UserRole
  skills: SkillCreateManyWithoutUsersWithSkillInput
}

input UserCreateWithoutSkillsInput {
  email: String!
  name: String
  auth0UserId: String!
  picture: String
  githubName: String
  flowdockName: String
  description: String
  hasCompletedWizard: Boolean
  role: UserRole
  projectsChampioned: ProjectCreateManyWithoutChampionsInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  auth0UserId_ASC
  auth0UserId_DESC
  picture_ASC
  picture_DESC
  githubName_ASC
  githubName_DESC
  flowdockName_ASC
  flowdockName_DESC
  description_ASC
  description_DESC
  hasCompletedWizard_ASC
  hasCompletedWizard_DESC
  role_ASC
  role_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  name: String
  auth0UserId: String!
  picture: String
  githubName: String
  flowdockName: String
  description: String
  hasCompletedWizard: Boolean
  role: UserRole
}

enum UserRole {
  REGULAR
  ADMIN
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  auth0UserId: String
  auth0UserId_not: String
  auth0UserId_in: [String!]
  auth0UserId_not_in: [String!]
  auth0UserId_lt: String
  auth0UserId_lte: String
  auth0UserId_gt: String
  auth0UserId_gte: String
  auth0UserId_contains: String
  auth0UserId_not_contains: String
  auth0UserId_starts_with: String
  auth0UserId_not_starts_with: String
  auth0UserId_ends_with: String
  auth0UserId_not_ends_with: String
  picture: String
  picture_not: String
  picture_in: [String!]
  picture_not_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_gt: String
  picture_gte: String
  picture_contains: String
  picture_not_contains: String
  picture_starts_with: String
  picture_not_starts_with: String
  picture_ends_with: String
  picture_not_ends_with: String
  githubName: String
  githubName_not: String
  githubName_in: [String!]
  githubName_not_in: [String!]
  githubName_lt: String
  githubName_lte: String
  githubName_gt: String
  githubName_gte: String
  githubName_contains: String
  githubName_not_contains: String
  githubName_starts_with: String
  githubName_not_starts_with: String
  githubName_ends_with: String
  githubName_not_ends_with: String
  flowdockName: String
  flowdockName_not: String
  flowdockName_in: [String!]
  flowdockName_not_in: [String!]
  flowdockName_lt: String
  flowdockName_lte: String
  flowdockName_gt: String
  flowdockName_gte: String
  flowdockName_contains: String
  flowdockName_not_contains: String
  flowdockName_starts_with: String
  flowdockName_not_starts_with: String
  flowdockName_ends_with: String
  flowdockName_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  hasCompletedWizard: Boolean
  hasCompletedWizard_not: Boolean
  role: UserRole
  role_not: UserRole
  role_in: [UserRole!]
  role_not_in: [UserRole!]
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  name: String
  auth0UserId: String
  picture: String
  githubName: String
  flowdockName: String
  description: String
  hasCompletedWizard: Boolean
  role: UserRole
  projectsChampioned: ProjectUpdateManyWithoutChampionsInput
  skills: SkillUpdateManyWithoutUsersWithSkillInput
}

input UserUpdateManyDataInput {
  email: String
  name: String
  auth0UserId: String
  picture: String
  githubName: String
  flowdockName: String
  description: String
  hasCompletedWizard: Boolean
  role: UserRole
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  auth0UserId: String
  picture: String
  githubName: String
  flowdockName: String
  description: String
  hasCompletedWizard: Boolean
  role: UserRole
}

input UserUpdateManyWithoutProjectsChampionedInput {
  create: [UserCreateWithoutProjectsChampionedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutProjectsChampionedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutProjectsChampionedInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutSkillsInput {
  create: [UserCreateWithoutSkillsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSkillsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSkillsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateWithoutProjectsChampionedDataInput {
  email: String
  name: String
  auth0UserId: String
  picture: String
  githubName: String
  flowdockName: String
  description: String
  hasCompletedWizard: Boolean
  role: UserRole
  skills: SkillUpdateManyWithoutUsersWithSkillInput
}

input UserUpdateWithoutSkillsDataInput {
  email: String
  name: String
  auth0UserId: String
  picture: String
  githubName: String
  flowdockName: String
  description: String
  hasCompletedWizard: Boolean
  role: UserRole
  projectsChampioned: ProjectUpdateManyWithoutChampionsInput
}

input UserUpdateWithWhereUniqueWithoutProjectsChampionedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutProjectsChampionedDataInput!
}

input UserUpdateWithWhereUniqueWithoutSkillsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSkillsDataInput!
}

input UserUpsertWithWhereUniqueWithoutProjectsChampionedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutProjectsChampionedDataInput!
  create: UserCreateWithoutProjectsChampionedInput!
}

input UserUpsertWithWhereUniqueWithoutSkillsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSkillsDataInput!
  create: UserCreateWithoutSkillsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  auth0UserId: String
  auth0UserId_not: String
  auth0UserId_in: [String!]
  auth0UserId_not_in: [String!]
  auth0UserId_lt: String
  auth0UserId_lte: String
  auth0UserId_gt: String
  auth0UserId_gte: String
  auth0UserId_contains: String
  auth0UserId_not_contains: String
  auth0UserId_starts_with: String
  auth0UserId_not_starts_with: String
  auth0UserId_ends_with: String
  auth0UserId_not_ends_with: String
  picture: String
  picture_not: String
  picture_in: [String!]
  picture_not_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_gt: String
  picture_gte: String
  picture_contains: String
  picture_not_contains: String
  picture_starts_with: String
  picture_not_starts_with: String
  picture_ends_with: String
  picture_not_ends_with: String
  githubName: String
  githubName_not: String
  githubName_in: [String!]
  githubName_not_in: [String!]
  githubName_lt: String
  githubName_lte: String
  githubName_gt: String
  githubName_gte: String
  githubName_contains: String
  githubName_not_contains: String
  githubName_starts_with: String
  githubName_not_starts_with: String
  githubName_ends_with: String
  githubName_not_ends_with: String
  flowdockName: String
  flowdockName_not: String
  flowdockName_in: [String!]
  flowdockName_not_in: [String!]
  flowdockName_lt: String
  flowdockName_lte: String
  flowdockName_gt: String
  flowdockName_gte: String
  flowdockName_contains: String
  flowdockName_not_contains: String
  flowdockName_starts_with: String
  flowdockName_not_starts_with: String
  flowdockName_ends_with: String
  flowdockName_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  hasCompletedWizard: Boolean
  hasCompletedWizard_not: Boolean
  role: UserRole
  role_not: UserRole
  role_in: [UserRole!]
  role_not_in: [UserRole!]
  projectsChampioned_every: ProjectWhereInput
  projectsChampioned_some: ProjectWhereInput
  projectsChampioned_none: ProjectWhereInput
  skills_every: SkillWhereInput
  skills_some: SkillWhereInput
  skills_none: SkillWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  auth0UserId: String
}
`